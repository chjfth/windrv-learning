#include "errmsg.h"

struct Num2Str_st
{
	DWORD number;
	const TCHAR *str;
};

#define NUM2STR(n) { n, _T(#n) }

const Num2Str_st gar_n2sSetupApiErr[] =
{
	NUM2STR(ERROR_NO_ASSOCIATED_CLASS),
	NUM2STR(ERROR_CLASS_MISMATCH),
	NUM2STR(ERROR_DUPLICATE_FOUND),
	NUM2STR(ERROR_NO_DRIVER_SELECTED),
	NUM2STR(ERROR_KEY_DOES_NOT_EXIST),
	NUM2STR(ERROR_INVALID_DEVINST_NAME),
	NUM2STR(ERROR_INVALID_CLASS),
	NUM2STR(ERROR_DEVINST_ALREADY_EXISTS),
	NUM2STR(ERROR_DEVINFO_NOT_REGISTERED),
	NUM2STR(ERROR_INVALID_REG_PROPERTY),
	NUM2STR(ERROR_NO_INF),
	NUM2STR(ERROR_NO_SUCH_DEVINST),
	NUM2STR(ERROR_CANT_LOAD_CLASS_ICON),
	NUM2STR(ERROR_INVALID_CLASS_INSTALLER),
	NUM2STR(ERROR_DI_DO_DEFAULT),
	NUM2STR(ERROR_DI_NOFILECOPY),
	NUM2STR(ERROR_INVALID_HWPROFILE),
	NUM2STR(ERROR_NO_DEVICE_SELECTED),
	NUM2STR(ERROR_DEVINFO_LIST_LOCKED),
	NUM2STR(ERROR_DEVINFO_DATA_LOCKED),
	NUM2STR(ERROR_DI_BAD_PATH),
	NUM2STR(ERROR_NO_CLASSINSTALL_PARAMS),
	NUM2STR(ERROR_FILEQUEUE_LOCKED),
	NUM2STR(ERROR_BAD_SERVICE_INSTALLSECT),
	NUM2STR(ERROR_NO_CLASS_DRIVER_LIST),
	NUM2STR(ERROR_NO_ASSOCIATED_SERVICE),
	NUM2STR(ERROR_NO_DEFAULT_DEVICE_INTERFACE),
	NUM2STR(ERROR_DEVICE_INTERFACE_ACTIVE),
	NUM2STR(ERROR_DEVICE_INTERFACE_REMOVED),
	NUM2STR(ERROR_BAD_INTERFACE_INSTALLSECT),
	NUM2STR(ERROR_NO_SUCH_INTERFACE_CLASS),
	NUM2STR(ERROR_INVALID_REFERENCE_STRING),
	NUM2STR(ERROR_INVALID_MACHINENAME),
	NUM2STR(ERROR_REMOTE_COMM_FAILURE),
	NUM2STR(ERROR_MACHINE_UNAVAILABLE),
	NUM2STR(ERROR_NO_CONFIGMGR_SERVICES),
	NUM2STR(ERROR_INVALID_PROPPAGE_PROVIDER),
	NUM2STR(ERROR_NO_SUCH_DEVICE_INTERFACE),
	NUM2STR(ERROR_DI_POSTPROCESSING_REQUIRED),
	NUM2STR(ERROR_INVALID_COINSTALLER),
	NUM2STR(ERROR_NO_COMPAT_DRIVERS),
	NUM2STR(ERROR_NO_DEVICE_ICON),
	NUM2STR(ERROR_INVALID_INF_LOGCONFIG),
	NUM2STR(ERROR_DI_DONT_INSTALL),
	NUM2STR(ERROR_INVALID_FILTER_DRIVER),
	NUM2STR(ERROR_NON_WINDOWS_NT_DRIVER),
	NUM2STR(ERROR_NON_WINDOWS_DRIVER),
	NUM2STR(ERROR_NO_CATALOG_FOR_OEM_INF),
	NUM2STR(ERROR_DEVINSTALL_QUEUE_NONNATIVE),
	NUM2STR(ERROR_NOT_DISABLEABLE),
	NUM2STR(ERROR_CANT_REMOVE_DEVINST),
	NUM2STR(ERROR_INVALID_TARGET),
	NUM2STR(ERROR_DRIVER_NONNATIVE),
	NUM2STR(ERROR_IN_WOW64),
	NUM2STR(ERROR_SET_SYSTEM_RESTORE_POINT),
	NUM2STR(ERROR_SCE_DISABLED),
	NUM2STR(ERROR_UNKNOWN_EXCEPTION),
	NUM2STR(ERROR_PNP_REGISTRY_ERROR),
	NUM2STR(ERROR_REMOTE_REQUEST_UNSUPPORTED),
	NUM2STR(ERROR_NOT_AN_INSTALLED_OEM_INF),
	NUM2STR(ERROR_INF_IN_USE_BY_DEVICES),
	NUM2STR(ERROR_DI_FUNCTION_OBSOLETE),
	NUM2STR(ERROR_NO_AUTHENTICODE_CATALOG),
	NUM2STR(ERROR_AUTHENTICODE_DISALLOWED),
	NUM2STR(ERROR_AUTHENTICODE_TRUSTED_PUBLISHER),
	NUM2STR(ERROR_AUTHENTICODE_TRUST_NOT_ESTABLISHED),
	NUM2STR(ERROR_AUTHENTICODE_PUBLISHER_NOT_TRUSTED),
	NUM2STR(ERROR_SIGNATURE_OSATTRIBUTE_MISMATCH),
	NUM2STR(ERROR_ONLY_VALIDATE_VIA_AUTHENTICODE),
	NUM2STR(ERROR_DEVICE_INSTALLER_NOT_READY),
	NUM2STR(ERROR_DRIVER_STORE_ADD_FAILED),
	NUM2STR(ERROR_DEVICE_INSTALL_BLOCKED),
	NUM2STR(ERROR_DRIVER_INSTALL_BLOCKED),
	NUM2STR(ERROR_WRONG_INF_TYPE),
	NUM2STR(ERROR_FILE_HASH_NOT_IN_CATALOG),
	NUM2STR(ERROR_DRIVER_STORE_DELETE_FAILED),
};

const TCHAR *Num2Str(const Num2Str_st *arn2s, int arsize, DWORD nquery)
{
//	static TCHAR *s_strret[40];
	int i;
	for(i=0; i<arsize; i++)
	{
		if(arn2s[i].number==nquery)
			return arn2s[i].str;
	}

	return NULL;
}

const TCHAR *SetupApi_ErrText(DWORD winerr)
{
	static TCHAR s_errsz[400] = {};

	// First check if it is a standard Win32 error code.

	DWORD retchars = FormatMessage(
		FORMAT_MESSAGE_FROM_SYSTEM|FORMAT_MESSAGE_IGNORE_INSERTS,
		NULL, winerr, 
		0, // LANGID
		s_errsz, ARRAYSIZE(s_errsz)-1,
		NULL); // A trailing \r\n has been filled.

	if(retchars>2)
	{
		if(s_errsz[retchars-1]=='\r' || s_errsz[retchars-1]=='\n')
			s_errsz[--retchars] = '\0';
		if(s_errsz[retchars-1]=='\r' || s_errsz[retchars-1]=='\n')
			s_errsz[--retchars] = '\0';

		return s_errsz;
	}

	// Then check if it is a SETUPAPI error code.

	const TCHAR *errmacro = Num2Str(gar_n2sSetupApiErr, ARRAYSIZE(gar_n2sSetupApiErr), winerr);
	if(errmacro)
	{
		_sntprintf_s(s_errsz, _TRUNCATE, _T("%s(0x%08X)"), errmacro, winerr);
		return s_errsz;
	}
	else
		return _T("Unknown error code");
}

void Print_SetupApiError(const TCHAR *apiname, DWORD winerr)
{
	if(winerr==-1)
		winerr = GetLastError();

	_tprintf(_T("%s() fail with WinErr=%d: %s\n"), apiname, 
		winerr, SetupApi_ErrText(winerr));
}

const Num2Str_st gar_n2sCfmgrErr[] =
{
	NUM2STR(CR_DEFAULT),
	NUM2STR(CR_OUT_OF_MEMORY),
	NUM2STR(CR_INVALID_POINTER),
	NUM2STR(CR_INVALID_FLAG),
	NUM2STR(CR_INVALID_DEVNODE),
	NUM2STR(CR_INVALID_RES_DES),
	NUM2STR(CR_INVALID_LOG_CONF),
	NUM2STR(CR_INVALID_ARBITRATOR),
	NUM2STR(CR_INVALID_NODELIST),
	NUM2STR(CR_DEVNODE_HAS_REQS),
	NUM2STR(CR_INVALID_RESOURCEID),
	NUM2STR(CR_DLVXD_NOT_FOUND),
	NUM2STR(CR_NO_SUCH_DEVNODE),
	NUM2STR(CR_NO_MORE_LOG_CONF),
	NUM2STR(CR_NO_MORE_RES_DES),
	NUM2STR(CR_ALREADY_SUCH_DEVNODE),
	NUM2STR(CR_INVALID_RANGE_LIST),
	NUM2STR(CR_INVALID_RANGE),
	NUM2STR(CR_FAILURE),
	NUM2STR(CR_NO_SUCH_LOGICAL_DEV),
	NUM2STR(CR_CREATE_BLOCKED),
	NUM2STR(CR_NOT_SYSTEM_VM),
	NUM2STR(CR_REMOVE_VETOED),
	NUM2STR(CR_APM_VETOED),
	NUM2STR(CR_INVALID_LOAD_TYPE),
	NUM2STR(CR_BUFFER_SMALL),
	NUM2STR(CR_NO_ARBITRATOR),
	NUM2STR(CR_NO_REGISTRY_HANDLE),
	NUM2STR(CR_REGISTRY_ERROR),
	NUM2STR(CR_INVALID_DEVICE_ID),
	NUM2STR(CR_INVALID_DATA),
	NUM2STR(CR_INVALID_API),
	NUM2STR(CR_DEVLOADER_NOT_READY),
	NUM2STR(CR_NEED_RESTART),
	NUM2STR(CR_NO_MORE_HW_PROFILES),
	NUM2STR(CR_DEVICE_NOT_THERE),
	NUM2STR(CR_NO_SUCH_VALUE),
	NUM2STR(CR_WRONG_TYPE),
	NUM2STR(CR_INVALID_PRIORITY),
	NUM2STR(CR_NOT_DISABLEABLE),
	NUM2STR(CR_FREE_RESOURCES),
	NUM2STR(CR_QUERY_VETOED),
	NUM2STR(CR_CANT_SHARE_IRQ),
	NUM2STR(CR_NO_DEPENDENT),
	NUM2STR(CR_SAME_RESOURCES),
	NUM2STR(CR_NO_SUCH_REGISTRY_KEY),
	NUM2STR(CR_INVALID_MACHINENAME),
	NUM2STR(CR_REMOTE_COMM_FAILURE),
	NUM2STR(CR_MACHINE_UNAVAILABLE), //  network problem, target host unreachable
	NUM2STR(CR_NO_CM_SERVICES), // same as ERROR_NO_CONFIGMGR_SERVICES
	NUM2STR(CR_ACCESS_DENIED),
	NUM2STR(CR_CALL_NOT_IMPLEMENTED),
	NUM2STR(CR_INVALID_PROPERTY),
	NUM2STR(CR_DEVICE_INTERFACE_ACTIVE),
	NUM2STR(CR_NO_SUCH_DEVICE_INTERFACE),
	NUM2STR(CR_INVALID_REFERENCE_STRING),
	NUM2STR(CR_INVALID_CONFLICT_LIST),
	NUM2STR(CR_INVALID_INDEX),
	NUM2STR(CR_INVALID_STRUCTURE_SIZE),
};

const TCHAR *Cfmgr_ErrText(DWORD cmerr)
{
	static TCHAR s_errsz[400] = {};

	const TCHAR *errmacro = Num2Str(gar_n2sCfmgrErr, ARRAYSIZE(gar_n2sCfmgrErr), cmerr);
	if(errmacro)
	{
		_sntprintf_s(s_errsz, _TRUNCATE, _T("%s(0x%08X)"), errmacro, cmerr);
		return s_errsz;
	}
	else
		return _T("Unknown error code");
}

void Print_CfmgrError(const TCHAR *apiname, DWORD cmerr)
{
	_tprintf(_T("%s() fail with WinErr=%d: %s\n"), apiname, 
		cmerr, Cfmgr_ErrText(cmerr));
}
